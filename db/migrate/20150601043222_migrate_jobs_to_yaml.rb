class MigrateJobsToYaml < ActiveRecord::Migration
  def up
    select_all("SELECT * FROM projects").each do |project|
      config = {jobs: [], deploy_jobs: []}

      concatenate_expression = if ActiveRecord::Base.connection.adapter_name == 'PostgreSQL' 
                                 "string_agg(tags.name, ',')"
                               else
                                 "GROUP_CONCAT(tags.name SEPARATOR ',')"
                               end

      sql = "SELECT j.*, #{concatenate_expression} tags
        FROM jobs j
          LEFT JOIN taggings tgs ON j.id = tgs.taggable_id AND tgs.taggable_type = 'Job'
          LEFT JOIN tags ON tgs.tag_id = tags.id
        WHERE project_id = #{project['id']}
          AND active = true
          AND job_type = 'parallel'
        GROUP BY j.id"

      # Create Jobs
      select_all(sql).each do |job|
        config[:jobs] << {
          script: job["commands"],
          name: job["name"],
          branches: parse_boolean_value(job["build_branches"]),
          tags: parse_boolean_value(job["build_tags"]),
          runner: job["tags"]
        }
      end

      # Create Deploy Jobs
      select_all(sql.sub("parallel", 'deploy')).each do |job|
        config[:deploy_jobs] << {
          script: job["commands"],
          name: job["name"],
          refs: job["refs"],
          runner: job["tags"]
        }
      end

      config[:skip_refs] = project["skip_refs"]

      yaml_config = YAML.dump(config.deep_stringify_keys)

      yaml_config.sub!("---", "# This file is generated by GitLab CI")

      execute("UPDATE projects SET generated_yaml_config = '#{quote_string(yaml_config)}' WHERE projects.id = #{project["id"]}")
    end
  end

  def down

  end

  private

  def parse_boolean_value(value)
    [ true, 1, '1', 't', 'T', 'true', 'TRUE', 'on', 'ON' ].include?(value)
  end
end
